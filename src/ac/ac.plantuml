@startuml

title __AC's Class Diagram__\n

  namespace ac {
    class ac.ACElementar {
        ~ cellDimension : int
        ~ cells : int[]
        ~ generation : int
        ~ ruleset : int[]
        + ACElementar()
        + display()
        + generate()
        - rules()
    }
  }
  

  namespace ac {
    class ac.Cell {
        # state : int
        - col : int
        - img : PImage
        - neighbors : Cell[]
        - row : int
        + Cell()
        + display()
        + getNeighbors()
        + getState()
        + setImg()
        + setNeighbors()
        + setState()
    }
  }
  

  namespace ac {
    class ac.CellularAutomata {
        # cellHeight : float
        # cellWidth : float
        # cells : Cell[][]
        # nStates : int
        # ncols : int
        # nrows : int
        # p : PApplet
        # xmin : float
        # ymin : float
        - art : String[]
        - colors : int[]
        - radiusNeigh : int
        + CellularAutomata()
        + display()
        + getCenterCell()
        + getStateColors()
        + getTerrainArt()
        + initRandom()
        + initRandomCustom()
        + pixel2Cell()
        + setStateColors()
        + setStateColors()
        + setTerrainArt()
        + world2Cell()
        # createCells()
        # setMooreNeighbors()
    }
  }
  

  namespace ac {
    class ac.GOL {
        ~ cellDimension : int
        ~ cells : int[]
        ~ chance : double
        ~ size : int
        + GOL()
        + clearScreen()
        + display()
        + numN()
        + pos()
        + regrasGOL()
        ~ setCell()
    }
  }
  

  namespace ac {
    class ac.MajorityCA {
        + MajorityCA()
        + majorityRule()
        # createCells()
    }
  }
  

  namespace ac {
    class ac.MajorityCell {
        + MajorityCell()
        + applyMajorityRule()
        + computeHistogram()
    }
  }
  

  namespace ac {
    class ac.SketchACElementar {
        + draw()
        + keyPressed()
        + mouseDragged()
        + mousePressed()
        + setup()
    }
  }
  

  namespace ac {
    class ac.SketchGOL {
        - NUM_STEPS_PER_FRAME : int
        - delete : boolean
        - paused : boolean
        + draw()
        + keyPressed()
        + mouseDragged()
        + mousePressed()
        + setup()
    }
  }
  

  namespace ac {
    class ac.TestCA {
        - nStates : int
        - ncols : int
        - nrows : int
        - radiusNeigh : int
        - viewport : float[]
        - window : double[]
        + draw()
        + keyPressed()
        + mouseDragged()
        + mousePressed()
        + setup()
    }
  }
  

  namespace ac {
    class ac.TestMajorityCA {
        - viewport : float[]
        - window : double[]
        + draw()
        + keyPressed()
        + mouseDragged()
        + mousePressed()
        + setup()
    }
  }
  

  ac.Cell o-- ac.CellularAutomata : ca
  ac.CellularAutomata o-- tools.SubPlot : plt
  ac.MajorityCA -up-|> ac.CellularAutomata
  ac.MajorityCell -up-|> ac.Cell
  ac.MajorityCell o-- tools.Histogram : hist
  ac.SketchACElementar .up.|> setup.IProcessingApp
  ac.SketchACElementar o-- ac.ACElementar : ac
  ac.SketchGOL .up.|> setup.IProcessingApp
  ac.SketchGOL o-- ac.GOL : gol
  ac.TestCA .up.|> setup.IProcessingApp
  ac.TestCA o-- ac.CellularAutomata : ca
  ac.TestCA o-- tools.SubPlot : plt
  ac.TestMajorityCA .up.|> setup.IProcessingApp
  ac.TestMajorityCA o-- ac.MajorityCA : ca
  ac.TestMajorityCA o-- tools.SubPlot : plt


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
